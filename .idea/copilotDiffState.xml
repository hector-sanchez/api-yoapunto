<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.env">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="# Database Configuration - SQLite for development&#10;DATABASE_URL=sqlite:///./yoapunto.db&#10;&#10;# PostgreSQL option (uncomment and update credentials when ready)&#10;# DATABASE_URL=postgresql://hectorsanchez:@localhost/yoapunto_db" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.env.example">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.env.example" />
              <option name="updatedContent" value="# Example environment configuration&#10;# Copy this file to .env and update with your actual values&#10;&#10;DATABASE_URL=sqlite:///./yoapunto.db&#10;# For PostgreSQL: postgresql://username:password@localhost/database_name" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/.gitignore">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.gitignore" />
              <option name="updatedContent" value="# Byte-compiled / optimized / DLL files&#10;__pycache__/&#10;*.py[cod]&#10;*$py.class&#10;&#10;# Virtual environments&#10;.venv/&#10;venv/&#10;env/&#10;ENV/&#10;&#10;# Environment variables (contains secrets!)&#10;.env&#10;.env.*&#10;&#10;# IDE files&#10;.idea/&#10;.vscode/&#10;*.swp&#10;*.swo&#10;&#10;# Test and coverage files&#10;.pytest_cache/&#10;.coverage&#10;htmlcov/&#10;.tox/&#10;.cache&#10;*.cover&#10;&#10;# Database files&#10;*.db&#10;*.sqlite&#10;*.sqlite3&#10;yoapunto.db&#10;test_yoapunto.db&#10;&#10;# OS files&#10;.DS_Store&#10;Thumbs.db&#10;&#10;# Logs&#10;*.log&#10;&#10;# Distribution / packaging&#10;build/&#10;dist/&#10;*.egg-info/&#10;&#10;# mypy&#10;.mypy_cache/" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/__init__.py" />
              <option name="updatedContent" value="# App package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/__init__.py" />
              <option name="updatedContent" value="# API package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/v1/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/v1/__init__.py" />
              <option name="updatedContent" value="# API v1 package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/v1/api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/v1/api.py" />
              <option name="updatedContent" value="from fastapi import APIRouter&#10;from app.api.v1.endpoints import clubs&#10;&#10;api_router = APIRouter()&#10;&#10;api_router.include_router(clubs.router, prefix=&quot;/clubs&quot;, tags=[&quot;clubs&quot;])" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/v1/endpoints/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/v1/endpoints/__init__.py" />
              <option name="updatedContent" value="# Endpoints package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/api/v1/endpoints/clubs.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/api/v1/endpoints/clubs.py" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="from fastapi import APIRouter, Depends, HTTPException&#10;from sqlalchemy.orm import Session&#10;from typing import List&#10;&#10;from app.schemas import Club, ClubCreate, ClubUpdate&#10;from app.crud.club import create_club, get_clubs, get_club, update_club, deactivate_club&#10;from database import get_db&#10;&#10;router = APIRouter()&#10;&#10;@router.post(&quot;/&quot;, response_model=Club)&#10;def create_club_endpoint(club: ClubCreate, db: Session = Depends(get_db)):&#10;    return create_club(db=db, club=club)&#10;&#10;@router.get(&quot;/&quot;, response_model=List[Club])&#10;def read_clubs(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):&#10;    return get_clubs(db=db, skip=skip, limit=limit)&#10;&#10;@router.get(&quot;/{club_id}&quot;, response_model=Club)&#10;def read_club(club_id: int, db: Session = Depends(get_db)):&#10;    club = get_club(db=db, club_id=club_id)&#10;    if club is None:&#10;        raise HTTPException(status_code=404, detail=&quot;Club not found&quot;)&#10;    return club&#10;&#10;@router.put(&quot;/{club_id}&quot;, response_model=Club)&#10;def update_club_endpoint(club_id: int, club: ClubUpdate, db: Session = Depends(get_db)):&#10;    updated_club = update_club(db=db, club_id=club_id, club=club)&#10;    if updated_club is None:&#10;        raise HTTPException(status_code=404, detail=&quot;Club not found&quot;)&#10;    return updated_club&#10;&#10;@router.delete(&quot;/{club_id}&quot;)&#10;def delete_club(club_id: int, db: Session = Depends(get_db)):&#10;    club = deactivate_club(db=db, club_id=club_id)&#10;    if club is None:&#10;        raise HTTPException(status_code=404, detail=&quot;Club not found&quot;)&#10;    return {&quot;message&quot;: &quot;Club deactivated successfully&quot;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/crud/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/crud/__init__.py" />
              <option name="updatedContent" value="# CRUD package" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/crud/club.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/crud/club.py" />
              <option name="originalContent" value="&#10;&#10;&#10;" />
              <option name="updatedContent" value="from sqlalchemy.orm import Session&#10;from app.models import Club&#10;from app.schemas import ClubCreate, ClubUpdate&#10;&#10;def create_club(db: Session, club: ClubCreate):&#10;    db_club = Club(**club.model_dump())&#10;    db.add(db_club)&#10;    db.commit()&#10;    db.refresh(db_club)&#10;    return db_club&#10;&#10;def get_clubs(db: Session, skip: int = 0, limit: int = 100):&#10;    return db.query(Club).filter(Club.active == True).offset(skip).limit(limit).all()&#10;&#10;def get_club(db: Session, club_id: int):&#10;    return db.query(Club).filter(Club.id == club_id, Club.active == True).first()&#10;&#10;def update_club(db: Session, club_id: int, club: ClubUpdate):&#10;    db_club = db.query(Club).filter(Club.id == club_id, Club.active == True).first()&#10;    if db_club is None:&#10;        return None&#10;&#10;    update_data = club.model_dump(exclude_unset=True)&#10;    for field, value in update_data.items():&#10;        setattr(db_club, field, value)&#10;&#10;    db.commit()&#10;    db.refresh(db_club)&#10;    return db_club&#10;&#10;def deactivate_club(db: Session, club_id: int):&#10;    db_club = db.query(Club).filter(Club.id == club_id, Club.active == True).first()&#10;    if db_club is None:&#10;        return None&#10;&#10;    db_club.active = False&#10;    db.commit()&#10;    return db_club" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/models/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models/__init__.py" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="# Models package - centralized model imports&#10;from .club import Club&#10;&#10;__all__ = [&quot;Club&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/models/club.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/models/club.py" />
              <option name="originalContent" value="from sqlalchemy import Column, Integer, String, DateTime, Boolean&#10;from sqlalchemy.sql import func&#10;from database import Base&#10;&#10;class Club(Base):&#10;    __tablename__ = &quot;clubs&quot;&#10;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    nickname = Column(String, nullable=False, index=True)&#10;    creator = Column(String, nullable=False)&#10;    thumbnail_url = Column(String)  # URL or file path to the thumbnail image&#10;    active = Column(Boolean, default=True, nullable=False)&#10;    created_at = Column(DateTime(timezone=True), server_default=func.now())&#10;    updated_at = Column(DateTime(timezone=True), onupdate=func.now())&#10;" />
              <option name="updatedContent" value="from sqlalchemy import Column, Integer, String, DateTime, Boolean&#10;from sqlalchemy.sql import func&#10;from database import Base&#10;&#10;class Club(Base):&#10;    __tablename__ = &quot;clubs&quot;&#10;&#10;    id = Column(Integer, primary_key=True, index=True)&#10;    nickname = Column(String(50), nullable=False, index=True)  # Max 50 chars, required&#10;    creator = Column(String(50), nullable=False)  # Max 50 chars, required&#10;    thumbnail_url = Column(String)  # URL or file path to the thumbnail image&#10;    active = Column(Boolean, default=True, nullable=False)  # Defaults to True&#10;    created_at = Column(DateTime(timezone=True), server_default=func.now())&#10;    updated_at = Column(DateTime(timezone=True), onupdate=func.now())" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/schemas/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/schemas/__init__.py" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="# Schemas package - centralized schema imports&#10;from .club import Club, ClubCreate, ClubUpdate, ClubBase&#10;&#10;__all__ = [&quot;Club&quot;, &quot;ClubCreate&quot;, &quot;ClubUpdate&quot;, &quot;ClubBase&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/schemas/club.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/schemas/club.py" />
              <option name="originalContent" value="from pydantic import BaseModel&#10;from datetime import datetime&#10;from typing import Optional&#10;&#10;# Club schemas&#10;class ClubBase(BaseModel):&#10;    nickname: str&#10;    creator: str&#10;    thumbnail_url: Optional[str] = None&#10;&#10;class ClubCreate(ClubBase):&#10;    pass&#10;&#10;class ClubUpdate(BaseModel):&#10;    nickname: Optional[str] = None&#10;    creator: Optional[str] = None&#10;    thumbnail_url: Optional[str] = None&#10;    active: Optional[bool] = None&#10;&#10;class Club(ClubBase):&#10;    id: int&#10;    active: bool&#10;    created_at: datetime&#10;    updated_at: Optional[datetime] = None&#10;&#10;    class Config:&#10;        from_attributes = True&#10;" />
              <option name="updatedContent" value="from pydantic import BaseModel, Field&#10;from datetime import datetime&#10;from typing import Optional&#10;&#10;# Club schemas&#10;class ClubBase(BaseModel):&#10;    nickname: str = Field(..., min_length=1, max_length=50, description=&quot;Club nickname (1-50 characters)&quot;)&#10;    creator: str = Field(..., min_length=1, max_length=50, description=&quot;Club creator name (1-50 characters)&quot;)&#10;    thumbnail_url: Optional[str] = Field(None, description=&quot;URL to club thumbnail image&quot;)&#10;&#10;class ClubCreate(ClubBase):&#10;    pass&#10;&#10;class ClubUpdate(BaseModel):&#10;    nickname: Optional[str] = Field(None, min_length=1, max_length=50, description=&quot;Club nickname (1-50 characters)&quot;)&#10;    creator: Optional[str] = Field(None, min_length=1, max_length=50, description=&quot;Club creator name (1-50 characters)&quot;)&#10;    thumbnail_url: Optional[str] = Field(None, description=&quot;URL to club thumbnail image&quot;)&#10;    active: Optional[bool] = Field(None, description=&quot;Whether the club is active&quot;)&#10;&#10;class Club(ClubBase):&#10;    id: int&#10;    active: bool = True  # Show default value in response&#10;    created_at: datetime&#10;    updated_at: Optional[datetime] = None&#10;    &#10;    class Config:&#10;        from_attributes = True" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/conftest.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/conftest.py" />
              <option name="originalContent" value="import pytest&#10;import os&#10;from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker&#10;from fastapi.testclient import TestClient&#10;&#10;from database import Base, get_db&#10;from main import app&#10;# Import models the SAME way as main.py does&#10;from app.models import club&#10;&#10;# Test database URL - using file-based SQLite for tests&#10;TEST_DATABASE_URL = &quot;sqlite:///./test_yoapunto.db&quot;&#10;&#10;# Create a single test engine that will be shared&#10;test_engine = create_engine(TEST_DATABASE_URL, connect_args={&quot;check_same_thread&quot;: False})&#10;TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)&#10;&#10;def override_get_db():&#10;    try:&#10;        db = TestingSessionLocal()&#10;        yield db&#10;    finally:&#10;        db.close()&#10;&#10;@pytest.fixture(scope=&quot;function&quot;)&#10;def db():&#10;    &quot;&quot;&quot;Create a fresh database for each test&quot;&quot;&quot;&#10;    # Create tables using the same Base that main.py uses&#10;    Base.metadata.create_all(bind=test_engine)&#10;    db = TestingSessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()&#10;&#10;@pytest.fixture(scope=&quot;function&quot;)&#10;def client():&#10;    &quot;&quot;&quot;Create a test client with database dependency override&quot;&quot;&quot;&#10;    # Create tables for this test&#10;    Base.metadata.create_all(bind=test_engine)&#10;&#10;    # Override the database dependency to use test database&#10;    app.dependency_overrides[get_db] = override_get_db&#10;&#10;    with TestClient(app) as test_client:&#10;        yield test_client&#10;&#10;    # Clean up&#10;    app.dependency_overrides.clear()&#10;&#10;@pytest.fixture(scope=&quot;session&quot;, autouse=True)&#10;def cleanup_test_db():&#10;    &quot;&quot;&quot;Clean up test database file after all tests&quot;&quot;&quot;&#10;    yield&#10;    # Remove test database file after all tests are done&#10;    if os.path.exists(&quot;test_yoapunto.db&quot;):&#10;        os.remove(&quot;test_yoapunto.db&quot;)&#10;" />
              <option name="updatedContent" value="import pytest&#10;import os&#10;from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker&#10;from fastapi.testclient import TestClient&#10;&#10;from database import Base, get_db&#10;from main import app&#10;# Import models the SAME way as main.py does&#10;from app.models import club&#10;&#10;# Test database URL - using file-based SQLite for tests&#10;TEST_DATABASE_URL = &quot;sqlite:///./test_yoapunto.db&quot;&#10;&#10;# Create a single test engine that will be shared&#10;test_engine = create_engine(TEST_DATABASE_URL, connect_args={&quot;check_same_thread&quot;: False})&#10;TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=test_engine)&#10;&#10;def override_get_db():&#10;    try:&#10;        db = TestingSessionLocal()&#10;        yield db&#10;    finally:&#10;        db.close()&#10;&#10;@pytest.fixture(scope=&quot;function&quot;)&#10;def db():&#10;    &quot;&quot;&quot;Create a fresh database for each test&quot;&quot;&quot;&#10;    # Drop all tables first to ensure clean state&#10;    Base.metadata.drop_all(bind=test_engine)&#10;    # Create fresh tables&#10;    Base.metadata.create_all(bind=test_engine)&#10;    db = TestingSessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()&#10;        # Clean up after test&#10;        Base.metadata.drop_all(bind=test_engine)&#10;&#10;@pytest.fixture(scope=&quot;function&quot;) &#10;def client():&#10;    &quot;&quot;&quot;Create a test client with database dependency override&quot;&quot;&quot;&#10;    # Drop all tables first to ensure clean state&#10;    Base.metadata.drop_all(bind=test_engine)&#10;    # Create fresh tables for this test&#10;    Base.metadata.create_all(bind=test_engine)&#10;    &#10;    # Override the database dependency to use test database&#10;    app.dependency_overrides[get_db] = override_get_db&#10;    &#10;    with TestClient(app) as test_client:&#10;        yield test_client&#10;    &#10;    # Clean up after test&#10;    app.dependency_overrides.clear()&#10;    Base.metadata.drop_all(bind=test_engine)&#10;&#10;@pytest.fixture(scope=&quot;session&quot;, autouse=True)&#10;def cleanup_test_db():&#10;    &quot;&quot;&quot;Clean up test database file after all tests&quot;&quot;&quot;&#10;    yield&#10;    # Remove test database file after all tests are done&#10;    if os.path.exists(&quot;test_yoapunto.db&quot;):&#10;        os.remove(&quot;test_yoapunto.db&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/database.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/database.py" />
              <option name="originalContent" value="from sqlalchemy import create_engine&#10;from sqlalchemy.ext.declarative import declarative_base&#10;from sqlalchemy.orm import sessionmaker&#10;import os&#10;from dotenv import load_dotenv&#10;&#10;load_dotenv()&#10;&#10;# Database URL - you can set this in a .env file&#10;DATABASE_URL = os.getenv(&quot;DATABASE_URL&quot;, &quot;postgresql://user:password@localhost/yoapunto_db&quot;)&#10;&#10;engine = create_engine(DATABASE_URL)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;Base = declarative_base()&#10;&#10;# Dependency to get database session&#10;def get_db():&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()&#10;" />
              <option name="updatedContent" value="from sqlalchemy import create_engine&#10;from sqlalchemy.orm import sessionmaker, declarative_base&#10;import os&#10;from dotenv import load_dotenv&#10;&#10;load_dotenv()&#10;&#10;# Database URL - you can set this in a .env file&#10;DATABASE_URL = os.getenv(&quot;DATABASE_URL&quot;, &quot;sqlite:///./yoapunto.db&quot;)&#10;&#10;engine = create_engine(DATABASE_URL)&#10;SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)&#10;&#10;Base = declarative_base()&#10;&#10;# Dependency to get database session&#10;def get_db():&#10;    db = SessionLocal()&#10;    try:&#10;        yield db&#10;    finally:&#10;        db.close()" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/main.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.py" />
              <option name="originalContent" value="from fastapi import FastAPI&#10;from app.api.v1.api import api_router&#10;from app.models.club import Club&#10;from database import engine&#10;&#10;# Create database tables&#10;Club.metadata.create_all(bind=engine)&#10;&#10;app = FastAPI(title=&quot;YoApunto API&quot;, version=&quot;1.0.0&quot;)&#10;&#10;@app.get(&quot;/&quot;)&#10;def read_root():&#10;    return {&quot;message&quot;: &quot;Welcome to YoApunto API&quot;}&#10;&#10;# Include API routes&#10;app.include_router(api_router, prefix=&quot;/api/v1&quot;)&#10;" />
              <option name="updatedContent" value="from fastapi import FastAPI&#10;from app.api.v1.api import api_router&#10;from database import engine, Base&#10;# Import models to register them with Base&#10;from app.models import club&#10;&#10;# Create database tables&#10;Base.metadata.create_all(bind=engine)&#10;&#10;app = FastAPI(title=&quot;YoApunto API&quot;, version=&quot;1.0.0&quot;)&#10;&#10;@app.get(&quot;/&quot;)&#10;def read_root():&#10;    return {&quot;message&quot;: &quot;Welcome to YoApunto API&quot;}&#10;&#10;# Include API routes&#10;app.include_router(api_router, prefix=&quot;/api/v1&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/models.py" />
              <option name="originalContent" value="# This file has been moved to app/models/club.py&#10;# Please use the new organized structure&#10;&#10;" />
              <option name="updatedContent" value="# This file has been moved to app/models/&#10;# Delete this file to avoid conflicts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pyproject.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pyproject.toml" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="[tool.pytest.ini_options]&#10;testpaths = [&quot;tests&quot;]&#10;python_files = [&quot;test_*.py&quot;]&#10;python_classes = [&quot;Test*&quot;]&#10;python_functions = [&quot;test_*&quot;]&#10;addopts = [&#10;    &quot;-v&quot;,&#10;    &quot;--tb=short&quot;,&#10;    &quot;--strict-markers&quot;,&#10;    &quot;--disable-warnings&quot;,&#10;]&#10;filterwarnings = [&#10;    &quot;ignore::DeprecationWarning&quot;,&#10;    &quot;ignore::PendingDeprecationWarning&quot;,&#10;    &quot;ignore::UserWarning&quot;,&#10;    &quot;ignore:.*declarative_base.*&quot;,&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/requirements.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/requirements.txt" />
              <option name="originalContent" value="fastapi==0.104.1&#10;uvicorn==0.24.0&#10;sqlalchemy==2.0.23&#10;alembic==1.13.1&#10;psycopg[binary]==3.2.9&#10;&#10;&#10;&#10;&#10;&#10;" />
              <option name="updatedContent" value="fastapi==0.112.0&#10;uvicorn==0.30.1&#10;sqlalchemy==2.0.31&#10;alembic==1.13.2&#10;psycopg[binary]==3.2.9&#10;python-dotenv==1.0.1&#10;pydantic==2.8.2&#10;&#10;# Testing dependencies&#10;pytest==8.3.2&#10;pytest-asyncio==0.23.8&#10;httpx==0.27.0&#10;pytest-mock==3.14.0" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/schemas.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/schemas.py" />
              <option name="originalContent" value="from pydantic import BaseModel&#10;from datetime import datetime&#10;from typing import Optional&#10;&#10;# Club schemas&#10;class ClubBase(BaseModel):&#10;    nickname: str&#10;    creator: str&#10;    thumbnail_url: Optional[str] = None&#10;&#10;class ClubCreate(ClubBase):&#10;    pass&#10;&#10;class ClubUpdate(BaseModel):&#10;    nickname: Optional[str] = None&#10;    creator: Optional[str] = None&#10;    thumbnail_url: Optional[str] = None&#10;    active: Optional[bool] = None&#10;&#10;class Club(ClubBase):&#10;    id: int&#10;    active: bool&#10;    created_at: datetime&#10;    updated_at: Optional[datetime] = None&#10;&#10;    class Config:&#10;        from_attributes = True&#10;" />
              <option name="updatedContent" value="# This file has been moved to app/schemas/club.py&#10;# Please use the new organized structure" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_api.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_api.py" />
              <option name="originalContent" value="from fastapi import status&#10;&#10;class TestClubAPI:&#10;    &quot;&quot;&quot;Integration tests for Club API endpoints&quot;&quot;&quot;&#10;&#10;    def test_create_club_success(self, client):&#10;        &quot;&quot;&quot;Test successful club creation via API&quot;&quot;&quot;&#10;        club_data = {&#10;            &quot;nickname&quot;: &quot;API Test Club&quot;,&#10;            &quot;creator&quot;: &quot;api_user&quot;,&#10;            &quot;thumbnail_url&quot;: &quot;https://example.com/api.jpg&quot;&#10;        }&#10;&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;&#10;        # Debug output&#10;        print(f&quot;Response status: {response.status_code}&quot;)&#10;        print(f&quot;Response body: {response.text}&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;nickname&quot;] == &quot;API Test Club&quot;&#10;        assert data[&quot;creator&quot;] == &quot;api_user&quot;&#10;        assert data[&quot;thumbnail_url&quot;] == &quot;https://example.com/api.jpg&quot;&#10;        assert data[&quot;active&quot;] is True&#10;        assert &quot;id&quot; in data&#10;        assert &quot;created_at&quot; in data&#10;&#10;    def test_create_club_debug(self, client):&#10;        &quot;&quot;&quot;Minimal test to debug what's happening&quot;&quot;&quot;&#10;        # First test if the root endpoint works&#10;        root_response = client.get(&quot;/&quot;)&#10;        print(f&quot;Root endpoint status: {root_response.status_code}&quot;)&#10;        print(f&quot;Root endpoint response: {root_response.json()}&quot;)&#10;&#10;        # Test if we can reach the clubs endpoint&#10;        get_response = client.get(&quot;/api/v1/clubs/&quot;)&#10;        print(f&quot;GET clubs status: {get_response.status_code}&quot;)&#10;        print(f&quot;GET clubs response: {get_response.text}&quot;)&#10;&#10;        # Try to create a club&#10;        club_data = {&quot;nickname&quot;: &quot;Debug Club&quot;, &quot;creator&quot;: &quot;debug_user&quot;}&#10;        post_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        print(f&quot;POST club status: {post_response.status_code}&quot;)&#10;        print(f&quot;POST club response: {post_response.text}&quot;)&#10;&#10;        # This test doesn't assert anything - just prints debug info&#10;&#10;    def test_create_club_without_thumbnail(self, client):&#10;        &quot;&quot;&quot;Test creating club without thumbnail URL&quot;&quot;&quot;&#10;        club_data = {&#10;            &quot;nickname&quot;: &quot;No Thumbnail Club&quot;,&#10;            &quot;creator&quot;: &quot;no_thumb_user&quot;&#10;        }&#10;&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;thumbnail_url&quot;] is None&#10;&#10;    def test_create_club_validation_errors(self, client):&#10;        &quot;&quot;&quot;Test validation errors in club creation&quot;&quot;&quot;&#10;        # Test missing required fields&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json={})&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test empty nickname&#10;        club_data = {&quot;nickname&quot;: &quot;&quot;, &quot;creator&quot;: &quot;user&quot;}&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test nickname too long&#10;        club_data = {&quot;nickname&quot;: &quot;a&quot; * 51, &quot;creator&quot;: &quot;user&quot;}&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test creator too long&#10;        club_data = {&quot;nickname&quot;: &quot;club&quot;, &quot;creator&quot;: &quot;b&quot; * 51}&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;    def test_get_clubs_empty(self, client):&#10;        &quot;&quot;&quot;Test getting clubs from empty database&quot;&quot;&quot;&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        assert response.json() == []&#10;&#10;    def test_get_clubs_with_data(self, client):&#10;        &quot;&quot;&quot;Test getting clubs with data&quot;&quot;&quot;&#10;        # Create test clubs&#10;        club1_data = {&quot;nickname&quot;: &quot;Club 1&quot;, &quot;creator&quot;: &quot;user1&quot;}&#10;        club2_data = {&quot;nickname&quot;: &quot;Club 2&quot;, &quot;creator&quot;: &quot;user2&quot;}&#10;&#10;        client.post(&quot;/api/v1/clubs/&quot;, json=club1_data)&#10;        client.post(&quot;/api/v1/clubs/&quot;, json=club2_data)&#10;&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert len(data) == 2&#10;        assert data[0][&quot;nickname&quot;] == &quot;Club 1&quot;&#10;        assert data[1][&quot;nickname&quot;] == &quot;Club 2&quot;&#10;&#10;    def test_get_clubs_pagination(self, client):&#10;        &quot;&quot;&quot;Test clubs pagination&quot;&quot;&quot;&#10;        # Create 5 clubs&#10;        for i in range(5):&#10;            club_data = {&quot;nickname&quot;: f&quot;Club {i}&quot;, &quot;creator&quot;: f&quot;user{i}&quot;}&#10;            client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;&#10;        # Test pagination&#10;        response = client.get(&quot;/api/v1/clubs/?skip=0&amp;limit=2&quot;)&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert len(data) == 2&#10;&#10;        response = client.get(&quot;/api/v1/clubs/?skip=2&amp;limit=2&quot;)&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert len(data) == 2&#10;&#10;    def test_get_club_by_id(self, client):&#10;        &quot;&quot;&quot;Test getting a specific club by ID&quot;&quot;&quot;&#10;        club_data = {&quot;nickname&quot;: &quot;Specific Club&quot;, &quot;creator&quot;: &quot;specific_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        response = client.get(f&quot;/api/v1/clubs/{created_club['id']}&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;id&quot;] == created_club[&quot;id&quot;]&#10;        assert data[&quot;nickname&quot;] == &quot;Specific Club&quot;&#10;&#10;    def test_get_club_not_found(self, client):&#10;        &quot;&quot;&quot;Test getting a club that doesn't exist&quot;&quot;&quot;&#10;        response = client.get(&quot;/api/v1/clubs/999&quot;)&#10;&#10;        assert response.status_code == status.HTTP_404_NOT_FOUND&#10;        assert &quot;Club not found&quot; in response.json()[&quot;detail&quot;]&#10;&#10;    def test_update_club_success(self, client):&#10;        &quot;&quot;&quot;Test successful club update&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;Original Club&quot;, &quot;creator&quot;: &quot;original_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Update the club&#10;        update_data = {&#10;            &quot;nickname&quot;: &quot;Updated Club&quot;,&#10;            &quot;thumbnail_url&quot;: &quot;https://example.com/updated.jpg&quot;&#10;        }&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;nickname&quot;] == &quot;Updated Club&quot;&#10;        assert data[&quot;creator&quot;] == &quot;original_user&quot;  # Unchanged&#10;        assert data[&quot;thumbnail_url&quot;] == &quot;https://example.com/updated.jpg&quot;&#10;&#10;    def test_update_club_partial(self, client):&#10;        &quot;&quot;&quot;Test partial club update&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;Partial Club&quot;, &quot;creator&quot;: &quot;partial_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Partial update - only nickname&#10;        update_data = {&quot;nickname&quot;: &quot;Partially Updated&quot;}&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;nickname&quot;] == &quot;Partially Updated&quot;&#10;        assert data[&quot;creator&quot;] == &quot;partial_user&quot;&#10;&#10;    def test_update_club_validation_errors(self, client):&#10;        &quot;&quot;&quot;Test validation errors in club update&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;Valid Club&quot;, &quot;creator&quot;: &quot;valid_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Test empty nickname&#10;        update_data = {&quot;nickname&quot;: &quot;&quot;}&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test nickname too long&#10;        update_data = {&quot;nickname&quot;: &quot;a&quot; * 51}&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;    def test_update_club_not_found(self, client):&#10;        &quot;&quot;&quot;Test updating a club that doesn't exist&quot;&quot;&quot;&#10;        update_data = {&quot;nickname&quot;: &quot;Nonexistent&quot;}&#10;        response = client.put(&quot;/api/v1/clubs/999&quot;, json=update_data)&#10;&#10;        assert response.status_code == status.HTTP_404_NOT_FOUND&#10;&#10;    def test_delete_club_success(self, client):&#10;        &quot;&quot;&quot;Test successful club deletion (deactivation)&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;To Delete&quot;, &quot;creator&quot;: &quot;delete_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Delete the club&#10;        response = client.delete(f&quot;/api/v1/clubs/{created_club['id']}&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        assert &quot;deactivated successfully&quot; in response.json()[&quot;message&quot;]&#10;&#10;        # Verify club is no longer accessible&#10;        get_response = client.get(f&quot;/api/v1/clubs/{created_club['id']}&quot;)&#10;        assert get_response.status_code == status.HTTP_404_NOT_FOUND&#10;&#10;    def test_delete_club_not_found(self, client):&#10;        &quot;&quot;&quot;Test deleting a club that doesn't exist&quot;&quot;&quot;&#10;        response = client.delete(&quot;/api/v1/clubs/999&quot;)&#10;&#10;        assert response.status_code == status.HTTP_404_NOT_FOUND&#10;&#10;    def test_delete_club_removes_from_list(self, client):&#10;        &quot;&quot;&quot;Test that deleted clubs don't appear in club list&quot;&quot;&quot;&#10;        # Create two clubs&#10;        club1_data = {&quot;nickname&quot;: &quot;Keep Club&quot;, &quot;creator&quot;: &quot;keep_user&quot;}&#10;        club2_data = {&quot;nickname&quot;: &quot;Delete Club&quot;, &quot;creator&quot;: &quot;delete_user&quot;}&#10;&#10;        create_response1 = client.post(&quot;/api/v1/clubs/&quot;, json=club1_data)&#10;        create_response2 = client.post(&quot;/api/v1/clubs/&quot;, json=club2_data)&#10;&#10;        created_club2 = create_response2.json()&#10;&#10;        # Verify both clubs are in the list&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;        assert len(response.json()) == 2&#10;&#10;        # Delete one club&#10;        client.delete(f&quot;/api/v1/clubs/{created_club2['id']}&quot;)&#10;&#10;        # Verify only one club remains in the list&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;        data = response.json()&#10;        assert len(data) == 1&#10;        assert data[0][&quot;nickname&quot;] == &quot;Keep Club&quot;&#10;&#10;    def test_root_endpoint(self, client):&#10;        &quot;&quot;&quot;Test the root endpoint&quot;&quot;&quot;&#10;        response = client.get(&quot;/&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        assert &quot;Welcome to YoApunto API&quot; in response.json()[&quot;message&quot;]&#10;" />
              <option name="updatedContent" value="from fastapi import status&#10;&#10;class TestClubAPI:&#10;    &quot;&quot;&quot;Integration tests for Club API endpoints&quot;&quot;&quot;&#10;&#10;    def test_create_club_success(self, client):&#10;        &quot;&quot;&quot;Test successful club creation via API&quot;&quot;&quot;&#10;        club_data = {&#10;            &quot;nickname&quot;: &quot;API Test Club&quot;,&#10;            &quot;creator&quot;: &quot;api_user&quot;,&#10;            &quot;thumbnail_url&quot;: &quot;https://example.com/api.jpg&quot;&#10;        }&#10;&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        &#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;nickname&quot;] == &quot;API Test Club&quot;&#10;        assert data[&quot;creator&quot;] == &quot;api_user&quot;&#10;        assert data[&quot;thumbnail_url&quot;] == &quot;https://example.com/api.jpg&quot;&#10;        assert data[&quot;active&quot;] is True&#10;        assert &quot;id&quot; in data&#10;        assert &quot;created_at&quot; in data&#10;&#10;    def test_create_club_without_thumbnail(self, client):&#10;        &quot;&quot;&quot;Test creating club without thumbnail URL&quot;&quot;&quot;&#10;        club_data = {&#10;            &quot;nickname&quot;: &quot;No Thumbnail Club&quot;,&#10;            &quot;creator&quot;: &quot;no_thumb_user&quot;&#10;        }&#10;&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;thumbnail_url&quot;] is None&#10;&#10;    def test_create_club_validation_errors(self, client):&#10;        &quot;&quot;&quot;Test validation errors in club creation&quot;&quot;&quot;&#10;        # Test missing required fields&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json={})&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test empty nickname&#10;        club_data = {&quot;nickname&quot;: &quot;&quot;, &quot;creator&quot;: &quot;user&quot;}&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test nickname too long&#10;        club_data = {&quot;nickname&quot;: &quot;a&quot; * 51, &quot;creator&quot;: &quot;user&quot;}&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test creator too long&#10;        club_data = {&quot;nickname&quot;: &quot;club&quot;, &quot;creator&quot;: &quot;b&quot; * 51}&#10;        response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;    def test_get_clubs_empty(self, client):&#10;        &quot;&quot;&quot;Test getting clubs from empty database&quot;&quot;&quot;&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        assert response.json() == []&#10;&#10;    def test_get_clubs_with_data(self, client):&#10;        &quot;&quot;&quot;Test getting clubs with data&quot;&quot;&quot;&#10;        # Create test clubs&#10;        club1_data = {&quot;nickname&quot;: &quot;Club 1&quot;, &quot;creator&quot;: &quot;user1&quot;}&#10;        club2_data = {&quot;nickname&quot;: &quot;Club 2&quot;, &quot;creator&quot;: &quot;user2&quot;}&#10;&#10;        client.post(&quot;/api/v1/clubs/&quot;, json=club1_data)&#10;        client.post(&quot;/api/v1/clubs/&quot;, json=club2_data)&#10;&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert len(data) == 2&#10;        assert data[0][&quot;nickname&quot;] == &quot;Club 1&quot;&#10;        assert data[1][&quot;nickname&quot;] == &quot;Club 2&quot;&#10;&#10;    def test_get_clubs_pagination(self, client):&#10;        &quot;&quot;&quot;Test clubs pagination&quot;&quot;&quot;&#10;        # Create 5 clubs&#10;        for i in range(5):&#10;            club_data = {&quot;nickname&quot;: f&quot;Club {i}&quot;, &quot;creator&quot;: f&quot;user{i}&quot;}&#10;            client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;&#10;        # Test pagination&#10;        response = client.get(&quot;/api/v1/clubs/?skip=0&amp;limit=2&quot;)&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert len(data) == 2&#10;&#10;        response = client.get(&quot;/api/v1/clubs/?skip=2&amp;limit=2&quot;)&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert len(data) == 2&#10;&#10;    def test_get_club_by_id(self, client):&#10;        &quot;&quot;&quot;Test getting a specific club by ID&quot;&quot;&quot;&#10;        club_data = {&quot;nickname&quot;: &quot;Specific Club&quot;, &quot;creator&quot;: &quot;specific_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        response = client.get(f&quot;/api/v1/clubs/{created_club['id']}&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;id&quot;] == created_club[&quot;id&quot;]&#10;        assert data[&quot;nickname&quot;] == &quot;Specific Club&quot;&#10;&#10;    def test_get_club_not_found(self, client):&#10;        &quot;&quot;&quot;Test getting a club that doesn't exist&quot;&quot;&quot;&#10;        response = client.get(&quot;/api/v1/clubs/999&quot;)&#10;&#10;        assert response.status_code == status.HTTP_404_NOT_FOUND&#10;        assert &quot;Club not found&quot; in response.json()[&quot;detail&quot;]&#10;&#10;    def test_update_club_success(self, client):&#10;        &quot;&quot;&quot;Test successful club update&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;Original Club&quot;, &quot;creator&quot;: &quot;original_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Update the club&#10;        update_data = {&#10;            &quot;nickname&quot;: &quot;Updated Club&quot;,&#10;            &quot;thumbnail_url&quot;: &quot;https://example.com/updated.jpg&quot;&#10;        }&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;nickname&quot;] == &quot;Updated Club&quot;&#10;        assert data[&quot;creator&quot;] == &quot;original_user&quot;  # Unchanged&#10;        assert data[&quot;thumbnail_url&quot;] == &quot;https://example.com/updated.jpg&quot;&#10;&#10;    def test_update_club_partial(self, client):&#10;        &quot;&quot;&quot;Test partial club update&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;Partial Club&quot;, &quot;creator&quot;: &quot;partial_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Partial update - only nickname&#10;        update_data = {&quot;nickname&quot;: &quot;Partially Updated&quot;}&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        data = response.json()&#10;        assert data[&quot;nickname&quot;] == &quot;Partially Updated&quot;&#10;        assert data[&quot;creator&quot;] == &quot;partial_user&quot;&#10;&#10;    def test_update_club_validation_errors(self, client):&#10;        &quot;&quot;&quot;Test validation errors in club update&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;Valid Club&quot;, &quot;creator&quot;: &quot;valid_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Test empty nickname&#10;        update_data = {&quot;nickname&quot;: &quot;&quot;}&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;        # Test nickname too long&#10;        update_data = {&quot;nickname&quot;: &quot;a&quot; * 51}&#10;        response = client.put(f&quot;/api/v1/clubs/{created_club['id']}&quot;, json=update_data)&#10;        assert response.status_code == status.HTTP_422_UNPROCESSABLE_ENTITY&#10;&#10;    def test_update_club_not_found(self, client):&#10;        &quot;&quot;&quot;Test updating a club that doesn't exist&quot;&quot;&quot;&#10;        update_data = {&quot;nickname&quot;: &quot;Nonexistent&quot;}&#10;        response = client.put(&quot;/api/v1/clubs/999&quot;, json=update_data)&#10;&#10;        assert response.status_code == status.HTTP_404_NOT_FOUND&#10;&#10;    def test_delete_club_success(self, client):&#10;        &quot;&quot;&quot;Test successful club deletion (deactivation)&quot;&quot;&quot;&#10;        # Create a club first&#10;        club_data = {&quot;nickname&quot;: &quot;To Delete&quot;, &quot;creator&quot;: &quot;delete_user&quot;}&#10;        create_response = client.post(&quot;/api/v1/clubs/&quot;, json=club_data)&#10;        created_club = create_response.json()&#10;&#10;        # Delete the club&#10;        response = client.delete(f&quot;/api/v1/clubs/{created_club['id']}&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        assert &quot;deactivated successfully&quot; in response.json()[&quot;message&quot;]&#10;&#10;        # Verify club is no longer accessible&#10;        get_response = client.get(f&quot;/api/v1/clubs/{created_club['id']}&quot;)&#10;        assert get_response.status_code == status.HTTP_404_NOT_FOUND&#10;&#10;    def test_delete_club_not_found(self, client):&#10;        &quot;&quot;&quot;Test deleting a club that doesn't exist&quot;&quot;&quot;&#10;        response = client.delete(&quot;/api/v1/clubs/999&quot;)&#10;&#10;        assert response.status_code == status.HTTP_404_NOT_FOUND&#10;&#10;    def test_delete_club_removes_from_list(self, client):&#10;        &quot;&quot;&quot;Test that deleted clubs don't appear in club list&quot;&quot;&quot;&#10;        # Create two clubs&#10;        club1_data = {&quot;nickname&quot;: &quot;Keep Club&quot;, &quot;creator&quot;: &quot;keep_user&quot;}&#10;        club2_data = {&quot;nickname&quot;: &quot;Delete Club&quot;, &quot;creator&quot;: &quot;delete_user&quot;}&#10;&#10;        create_response1 = client.post(&quot;/api/v1/clubs/&quot;, json=club1_data)&#10;        create_response2 = client.post(&quot;/api/v1/clubs/&quot;, json=club2_data)&#10;&#10;        created_club2 = create_response2.json()&#10;&#10;        # Verify both clubs are in the list&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;        assert len(response.json()) == 2&#10;&#10;        # Delete one club&#10;        client.delete(f&quot;/api/v1/clubs/{created_club2['id']}&quot;)&#10;&#10;        # Verify only one club remains in the list&#10;        response = client.get(&quot;/api/v1/clubs/&quot;)&#10;        data = response.json()&#10;        assert len(data) == 1&#10;        assert data[0][&quot;nickname&quot;] == &quot;Keep Club&quot;&#10;&#10;    def test_root_endpoint(self, client):&#10;        &quot;&quot;&quot;Test the root endpoint&quot;&quot;&quot;&#10;        response = client.get(&quot;/&quot;)&#10;&#10;        assert response.status_code == status.HTTP_200_OK&#10;        assert &quot;Welcome to YoApunto API&quot; in response.json()[&quot;message&quot;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_crud.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_crud.py" />
              <option name="updatedContent" value="import pytest&#10;from app.crud.club import create_club, get_clubs, get_club, update_club, deactivate_club&#10;from app.schemas import ClubCreate, ClubUpdate&#10;&#10;class TestClubCRUD:&#10;    &quot;&quot;&quot;Unit tests for Club CRUD operations&quot;&quot;&quot;&#10;    &#10;    def test_create_club(self, db):&#10;        &quot;&quot;&quot;Test creating a club through CRUD&quot;&quot;&quot;&#10;        club_data = ClubCreate(&#10;            nickname=&quot;CRUD Test Club&quot;,&#10;            creator=&quot;crud_user&quot;,&#10;            thumbnail_url=&quot;https://example.com/crud.jpg&quot;&#10;        )&#10;        &#10;        club = create_club(db=db, club=club_data)&#10;        &#10;        assert club.id is not None&#10;        assert club.nickname == &quot;CRUD Test Club&quot;&#10;        assert club.creator == &quot;crud_user&quot;&#10;        assert club.thumbnail_url == &quot;https://example.com/crud.jpg&quot;&#10;        assert club.active is True&#10;    &#10;    def test_create_club_without_thumbnail(self, db):&#10;        &quot;&quot;&quot;Test creating a club without thumbnail URL&quot;&quot;&quot;&#10;        club_data = ClubCreate(nickname=&quot;No Thumb Club&quot;, creator=&quot;no_thumb_user&quot;)&#10;        &#10;        club = create_club(db=db, club=club_data)&#10;        &#10;        assert club.thumbnail_url is None&#10;        assert club.active is True&#10;    &#10;    def test_get_clubs_empty(self, db):&#10;        &quot;&quot;&quot;Test getting clubs from empty database&quot;&quot;&quot;&#10;        clubs = get_clubs(db=db)&#10;        assert clubs == []&#10;    &#10;    def test_get_clubs_with_data(self, db):&#10;        &quot;&quot;&quot;Test getting clubs with data&quot;&quot;&quot;&#10;        # Create test clubs&#10;        club1_data = ClubCreate(nickname=&quot;Club 1&quot;, creator=&quot;user1&quot;)&#10;        club2_data = ClubCreate(nickname=&quot;Club 2&quot;, creator=&quot;user2&quot;)&#10;        &#10;        create_club(db=db, club=club1_data)&#10;        create_club(db=db, club=club2_data)&#10;        &#10;        clubs = get_clubs(db=db)&#10;        assert len(clubs) == 2&#10;        assert clubs[0].nickname == &quot;Club 1&quot;&#10;        assert clubs[1].nickname == &quot;Club 2&quot;&#10;    &#10;    def test_get_clubs_only_active(self, db):&#10;        &quot;&quot;&quot;Test that get_clubs only returns active clubs&quot;&quot;&quot;&#10;        # Create active club&#10;        active_club_data = ClubCreate(nickname=&quot;Active Club&quot;, creator=&quot;active_user&quot;)&#10;        active_club = create_club(db=db, club=active_club_data)&#10;        &#10;        # Create and deactivate a club&#10;        inactive_club_data = ClubCreate(nickname=&quot;Inactive Club&quot;, creator=&quot;inactive_user&quot;)&#10;        inactive_club = create_club(db=db, club=inactive_club_data)&#10;        deactivate_club(db=db, club_id=inactive_club.id)&#10;        &#10;        clubs = get_clubs(db=db)&#10;        assert len(clubs) == 1&#10;        assert clubs[0].nickname == &quot;Active Club&quot;&#10;    &#10;    def test_get_clubs_pagination(self, db):&#10;        &quot;&quot;&quot;Test pagination in get_clubs&quot;&quot;&quot;&#10;        # Create 5 clubs&#10;        for i in range(5):&#10;            club_data = ClubCreate(nickname=f&quot;Club {i}&quot;, creator=f&quot;user{i}&quot;)&#10;            create_club(db=db, club=club_data)&#10;        &#10;        # Test skip and limit&#10;        clubs_page1 = get_clubs(db=db, skip=0, limit=2)&#10;        clubs_page2 = get_clubs(db=db, skip=2, limit=2)&#10;        &#10;        assert len(clubs_page1) == 2&#10;        assert len(clubs_page2) == 2&#10;        assert clubs_page1[0].nickname != clubs_page2[0].nickname&#10;    &#10;    def test_get_club_by_id(self, db):&#10;        &quot;&quot;&quot;Test getting a specific club by ID&quot;&quot;&quot;&#10;        club_data = ClubCreate(nickname=&quot;Specific Club&quot;, creator=&quot;specific_user&quot;)&#10;        created_club = create_club(db=db, club=club_data)&#10;        &#10;        retrieved_club = get_club(db=db, club_id=created_club.id)&#10;        &#10;        assert retrieved_club is not None&#10;        assert retrieved_club.id == created_club.id&#10;        assert retrieved_club.nickname == &quot;Specific Club&quot;&#10;    &#10;    def test_get_club_nonexistent(self, db):&#10;        &quot;&quot;&quot;Test getting a club that doesn't exist&quot;&quot;&quot;&#10;        club = get_club(db=db, club_id=999)&#10;        assert club is None&#10;    &#10;    def test_get_club_inactive(self, db):&#10;        &quot;&quot;&quot;Test that get_club doesn't return inactive clubs&quot;&quot;&quot;&#10;        club_data = ClubCreate(nickname=&quot;Will Be Inactive&quot;, creator=&quot;inactive_user&quot;)&#10;        created_club = create_club(db=db, club=club_data)&#10;        &#10;        # Deactivate the club&#10;        deactivate_club(db=db, club_id=created_club.id)&#10;        &#10;        # Try to get the inactive club&#10;        retrieved_club = get_club(db=db, club_id=created_club.id)&#10;        assert retrieved_club is None&#10;    &#10;    def test_update_club(self, db):&#10;        &quot;&quot;&quot;Test updating a club&quot;&quot;&quot;&#10;        club_data = ClubCreate(nickname=&quot;Original Club&quot;, creator=&quot;original_user&quot;)&#10;        created_club = create_club(db=db, club=club_data)&#10;        &#10;        update_data = ClubUpdate(nickname=&quot;Updated Club&quot;, thumbnail_url=&quot;https://example.com/updated.jpg&quot;)&#10;        updated_club = update_club(db=db, club_id=created_club.id, club=update_data)&#10;        &#10;        assert updated_club is not None&#10;        assert updated_club.nickname == &quot;Updated Club&quot;&#10;        assert updated_club.creator == &quot;original_user&quot;  # Unchanged&#10;        assert updated_club.thumbnail_url == &quot;https://example.com/updated.jpg&quot;&#10;    &#10;    def test_update_club_partial(self, db):&#10;        &quot;&quot;&quot;Test partial update of a club&quot;&quot;&quot;&#10;        club_data = ClubCreate(nickname=&quot;Partial Club&quot;, creator=&quot;partial_user&quot;)&#10;        created_club = create_club(db=db, club=club_data)&#10;        &#10;        # Only update nickname&#10;        update_data = ClubUpdate(nickname=&quot;Partially Updated&quot;)&#10;        updated_club = update_club(db=db, club_id=created_club.id, club=update_data)&#10;        &#10;        assert updated_club.nickname == &quot;Partially Updated&quot;&#10;        assert updated_club.creator == &quot;partial_user&quot;  # Unchanged&#10;    &#10;    def test_update_club_nonexistent(self, db):&#10;        &quot;&quot;&quot;Test updating a club that doesn't exist&quot;&quot;&quot;&#10;        update_data = ClubUpdate(nickname=&quot;Nonexistent&quot;)&#10;        result = update_club(db=db, club_id=999, club=update_data)&#10;        assert result is None&#10;    &#10;    def test_deactivate_club(self, db):&#10;        &quot;&quot;&quot;Test deactivating a club&quot;&quot;&quot;&#10;        club_data = ClubCreate(nickname=&quot;To Deactivate&quot;, creator=&quot;deactivate_user&quot;)&#10;        created_club = create_club(db=db, club=club_data)&#10;        &#10;        result = deactivate_club(db=db, club_id=created_club.id)&#10;        &#10;        assert result is not None&#10;        assert result.active is False&#10;        &#10;        # Verify it's no longer returned by get_club&#10;        retrieved_club = get_club(db=db, club_id=created_club.id)&#10;        assert retrieved_club is None&#10;    &#10;    def test_deactivate_club_nonexistent(self, db):&#10;        &quot;&quot;&quot;Test deactivating a club that doesn't exist&quot;&quot;&quot;&#10;        result = deactivate_club(db=db, club_id=999)&#10;        assert result is None" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/tests/test_models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/tests/test_models.py" />
              <option name="updatedContent" value="import pytest&#10;from datetime import datetime&#10;from app.models import Club&#10;&#10;class TestClubModel:&#10;    &quot;&quot;&quot;Unit tests for the Club model&quot;&quot;&quot;&#10;    &#10;    def test_club_creation(self, db):&#10;        &quot;&quot;&quot;Test creating a club with valid data&quot;&quot;&quot;&#10;        club = Club(&#10;            nickname=&quot;Test Club&quot;,&#10;            creator=&quot;test_user&quot;,&#10;            thumbnail_url=&quot;https://example.com/image.jpg&quot;&#10;        )&#10;        &#10;        db.add(club)&#10;        db.commit()&#10;        db.refresh(club)&#10;        &#10;        assert club.id is not None&#10;        assert club.nickname == &quot;Test Club&quot;&#10;        assert club.creator == &quot;test_user&quot;&#10;        assert club.thumbnail_url == &quot;https://example.com/image.jpg&quot;&#10;        assert club.active is True  # Default value&#10;        assert isinstance(club.created_at, datetime)&#10;        assert club.updated_at is None  # Not updated yet&#10;    &#10;    def test_club_creation_without_thumbnail(self, db):&#10;        &quot;&quot;&quot;Test creating a club without thumbnail URL&quot;&quot;&quot;&#10;        club = Club(nickname=&quot;Simple Club&quot;, creator=&quot;simple_user&quot;)&#10;        &#10;        db.add(club)&#10;        db.commit()&#10;        db.refresh(club)&#10;        &#10;        assert club.thumbnail_url is None&#10;        assert club.active is True&#10;    &#10;    def test_club_active_default(self, db):&#10;        &quot;&quot;&quot;Test that active field defaults to True&quot;&quot;&quot;&#10;        club = Club(nickname=&quot;Active Club&quot;, creator=&quot;active_user&quot;)&#10;        &#10;        db.add(club)&#10;        db.commit()&#10;        db.refresh(club)&#10;        &#10;        assert club.active is True&#10;    &#10;    def test_club_string_length_constraints(self, db):&#10;        &quot;&quot;&quot;Test that string fields respect length constraints&quot;&quot;&quot;&#10;        # This test validates at the model level - SQLAlchemy will enforce at DB level&#10;        long_nickname = &quot;a&quot; * 51  # 51 characters, should be too long&#10;        long_creator = &quot;b&quot; * 51   # 51 characters, should be too long&#10;        &#10;        club = Club(nickname=long_nickname, creator=long_creator)&#10;        &#10;        # The model itself doesn't validate length - that's done at DB and Pydantic level&#10;        # This test ensures the model can handle the data before DB constraints kick in&#10;        assert club.nickname == long_nickname&#10;        assert club.creator == long_creator&#10;    &#10;    def test_club_updated_at_changes(self, db):&#10;        &quot;&quot;&quot;Test that updated_at changes when club is modified&quot;&quot;&quot;&#10;        club = Club(nickname=&quot;Update Test&quot;, creator=&quot;update_user&quot;)&#10;        &#10;        db.add(club)&#10;        db.commit()&#10;        db.refresh(club)&#10;        &#10;        original_updated_at = club.updated_at&#10;        &#10;        # Modify the club&#10;        club.nickname = &quot;Updated Club&quot;&#10;        db.commit()&#10;        db.refresh(club)&#10;        &#10;        # Note: updated_at behavior depends on DB configuration&#10;        # In SQLite, this might not auto-update, but the field exists&#10;        assert club.nickname == &quot;Updated Club&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>